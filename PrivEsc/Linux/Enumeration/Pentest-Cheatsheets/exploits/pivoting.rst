########
Pivoting
########

Meterpreter / Metasploit
========================

With a meterpreter session running, use the following command to get Metasploit to add some automatic routes through to the new network:

.. code-block:: none

    run post/multi/manage/autoroute

Now backround the meterpreter session and run the following in Metasploit.

.. code-block:: none

    use auxiliary/server/socks4a
    set SRVHOST 127.0.0.1
    run -j

This will set up a socks4a server bound to your local port 1080 by default. You can use auxiliary/server/socks5 if it works better.

Keep Metasploit running!

Add the following line to /etc/proxychains4.conf:

.. code-block:: none

    socks4 127.0.0.1 1080

Now we can proxy nmap scans (and other tools):

.. code-block:: none

    proxychains nmap -vv -Pn -sT 10.3.3.42

Use the -sT option with nmap, it will do connect scans which work through proxychains. If nmap is slow, scan reduced numbers of ports, and then scan any open ports individually with scripts, etc.

Meterpreter can also be used to forward ports:

.. code-block:: none

    portfwd add -l <local-port> -p <remote-port> -r <remote-host>

SSH
===

Local Port Forwarding
---------------------

Local port forwarding can be used to forward traffic from a local port on your computer to a port on another computer, via SSH. The syntax for this command is:

.. code-block:: bash

    ssh -L <local-port>:<destination-host>:<destination-port> user@<remote-host>

Note that the <destination-host> doesn't have to be the same as the <remote-host>, but can be. For example, if a remote host, say 10.1.1.1 can access an HTTP server on 10.3.3.3 which you cannot, you can perform the following command:

.. code-block:: bash

    ssh -L 4000:10.3.3.3:80 user@10.1.1.1

Now you can point your web browser at 127.0.0.1:4000 and you will be able to access the web server at 10.3.3.3.

Another example is less complicated. Say that the remote host (10.1.1.1) has a service (443) which is only listening for local traffic. We can do the following:

.. code-block:: bash

    ssh -L 4000:127.0.0.1:443 user@10.1.1.1

Note that in this command, 127.0.0.1 refers to 10.1.1.1 itself.

The -L option can be used multiple times in the same command, so that multiple port forwards can be used over the same SSH session. The local port must be different for each one.

Remote Port Forwarding
----------------------

Remote port forwarding is the opposite of local port forwarding. Traffic sent to the remote port (on the SSH server) is sent over the SSH connection to the destination port of the destination host.

.. code-block:: bash

    ssh -R <remote-port>:<destination-host>:<destination-port> user@<remote-host>

For example, if you want 10.3.3.3 to access a web server on your computer, you can do the following:

.. code-block:: bash

    ssh -R 4000:127.0.0.1:80 user@10.1.1.1

10.3.3.3 can now access your local port 80 by connecting to 10.1.1.1:4000 instead.

Within an SSH Session
---------------------

If you already have an established SSH session and you'd like to add port forwarding to that session, type:

.. code-block:: none

    ~C

You will then be presented with an SSH prompt. From here you can enter any of these commands. e.g. :code:`L <port>:<ip>:<port>`

Dynamic Port Forwarding
-----------------------

Dynamic port forwarding is like local port forwarding, except instead of forwarding traffic to specific destination hosts and ports, it allows use to proxy any traffic to any destination host / port, using a SOCKS proxy.

.. code-block:: bash

    ssh -D <local-port> user@<remote-host>

Now we can configure a proxy within our tool (or use proxychains, etc.) to send all traffic over our local port.

Reverse Dynamic Port Forwarding
-------------------------------

Useful if you can't connect to a remote host directly via SSH, but can connect back to your local machine with SSH. Note, for this you will require two sessions on the remote host, and either access to a remote user with an SSH key, or a remote user's credentials (or create a remote user if you have permissions!).

First run the following on the remote host:

.. code-block:: bash

    ssh -R 12345:localhost:12345 user@<local-host>

This will forward port 12345 of the remote host to your local port 12345. In essence, any traffic you send to your local port 12345 will get sent to port 12345 on the remote host via SSH. Note that "localhost" in the command actually refers to the remote host.

In the second session, run the following command on the remote host:

.. code-block:: bash

    ssh -D 12345 <remote-user>@localhost

This connects back to the remote host (localhost) using SSH, and binds a socks proxy to port 12345. Since we have forwarded our local traffic to this port, we can now proxy our tools through our local port 12345 and it should get sent to the socks proxy running on the remote host.

Master Sockets
--------------

SSH has an additional feature to create socket files for an established SSH session. This is useful if you have backgrounded an SSH session but still need to execute commands on the remote system.

Start by creating a backgrounded session:

.. code-block:: bash

    ssh -Nf -M -S ~/ssh.socket root@192.1681.1

.. code-block:: none

    -N tells ssh not to execute a command.
    -f backgrounds the session.
    -M for master socket mode.
    -S creates a socket file.

Later, if you need to execute commands on the remote system, or extend any port forwarding, you can interact with the socket file and pass commands:

.. code-block:: bash

    ssh -S ~/ssh.socket -L 4444:10.3.3.3:22 root@10.1.1.1 "ps -ef"

The above command creates a local port (4444) that forwards to 10.3.3.3 on port 22, and additionally executes :code:`ps -ef` on 10.1.1.1.

Disable Shell
-------------

All of the above commands will also open up a shell on the SSH server when you connect. You can disable this by using the -N option.

Proxychains "Compatible" Tools
------------------------------

The following tools work, at least in some configuration, with proxychains.

* nmap (when using -sT)
* nikto
* dirb
* rdesktop
* smbclient
